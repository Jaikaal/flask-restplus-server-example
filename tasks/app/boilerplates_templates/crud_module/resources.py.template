# encoding: utf-8
# pylint: disable=bad-continuation
"""
RESTful API {{ module_title }} resources
--------------------------
"""

import logging

from flask_login import current_user
from flask_restplus_patched import Resource
from flask_restplus._http import HTTPStatus

from app.extensions import db
from app.extensions.api import Namespace, abort
from app.extensions.api.parameters import PaginationParameters
from app.modules.users import permissions


from . import parameters, schemas
from .models import {{ model_names|join(', ') }}


log = logging.getLogger(__name__)  # pylint: disable=invalid-name
api = Namespace('{{ module_namespace }}', description="{{ module_title }}")  # pylint: disable=invalid-name

{% for i in range(model_names|count) %} {% set model_name = model_names[i] %}
@api.route('/{% if i > 0 %}{{ models[i] }}{% endif %}')
@api.login_required(oauth_scopes=['{{ module_namespace }}:read'])
class {{ model_name.replace(' ', '') }}s(Resource):
    """
    Manipulations with {{ module_title }}.
    """

    @api.parameters(PaginationParameters())
    @api.response(schemas.Base{{ model_name }}Schema(many=True))
    def get(self, args):
        """
        List of {{ model_name }}.

        Returns a list of {{ model_name }} starting from ``offset`` limited by ``limit``
        parameter.
        """
        return {{ model_name }}.query.offset(args['offset']).limit(args['limit'])

    @api.login_required(oauth_scopes=['{{ module_namespace }}:write'])
    @api.parameters(parameters.Create{{ model_name }}Parameters())
    @api.response(schemas.Detailed{{ model_name }}Schema())
    @api.response(code=HTTPStatus.CONFLICT)
    def post(self, args):
        """
        Create a new instance of {{ model_name }}.
        """
        with api.commit_or_abort(
                db.session,
                default_error_message="Failed to create a new {{ model_name }}"
            ):
            {{ models[i]|replace('-', '_') }} = {{ model_name }}(**args)
            db.session.add({{ models[i]|replace('-', '_') }})
        return {{ models[i]|replace('-', '_') }}


@api.route('/{%if i>0 %}{{ models[i] }}/{% endif %}<int:{{ models[i] }}_id>')
@api.login_required(oauth_scopes=['{{ module_namespace }}:read'])
@api.response(
    code=HTTPStatus.NOT_FOUND,
    description="{{ model_name }} not found.",
)
@api.resolve_object_by_model({{ model_name }}, '{{ models[i] }}')
class {{ model_name }}ByID(Resource):
    """
    Manipulations with a specific {{ model_name }}.
    """

    @api.response(schemas.Detailed{{ model_name }}Schema())
    def get(self, {{ models[i]|replace('-', '_') }}):
        """
        Get {{ model_name }} details by ID.
        """
        return {{ models[i]|replace('-', '_') }}

    @api.login_required(oauth_scopes=['{{ module_namespace }}:write'])
    @api.permission_required(permissions.WriteAccessPermission())
    @api.parameters(parameters.Patch{{ model_name }}DetailsParameters())
    @api.response(schemas.Detailed{{ model_name }}Schema())
    @api.response(code=HTTPStatus.CONFLICT)
    def patch(self, args, {{ models[i]|replace('-', '_') }}):
        """
        Patch {{ model_name }} details by ID.
        """
        with api.commit_or_abort(
                db.session,
                default_error_message="Failed to update {{ model_name }} details."
            ):
            parameters.Patch{{ model_name }}DetailsParameters.perform_patch(args, obj={{ models[i]|replace('-', '_') }})
            db.session.merge({{ models[i]|replace('-', '_') }})
        return {{ models[i]|replace('-', '_') }}

    @api.login_required(oauth_scopes=['{{ module_namespace }}:write'])
    @api.permission_required(permissions.WriteAccessPermission())
    @api.response(code=HTTPStatus.CONFLICT)
    @api.response(code=HTTPStatus.NO_CONTENT)
    def delete(self, {{ models[i]|replace('-', '_') }}):
        """
        Delete a {{ model_name }} by ID.
        """
        with api.commit_or_abort(
                db.session,
                default_error_message="Failed to delete the {{ model_name }}."
            ):
            db.session.delete({{ models[i]|replace('-', '_') }})
        return None
{% endfor %}